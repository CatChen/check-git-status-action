name: "Check Git Status"
description: "Fail the workflow or git push based if git status is not clean."
inputs:
  fail-if-not-clean:
    description: "Fail the workflow if git status is not clean."
    required: false
    default: true
  push-if-not-clean:
    description: "Commit the changes and push them to the origin if git status is not clean."
    required: false
    default: false
  request-changes-if-not-clean:
    description: "Request change when in the context of a Pull Request if git status is not clean."
    required: false
    default: true
  github-token:
    description: "GitHub token to use when pushing new changes."
    required: false
    default: ${{ github.token }}
    deprecationMessage: "Please use the push-token input instead."
  push-token:
    description: "GitHub token to use when pushing new changes."
    required: false
    default: ${{ github.token }}
  request-changes-token:
    description: "GitHub token to use when requesting changes in a Pull Request."
    required: false
    default: ${{ github.token }}
  commit-message:
    description: "The commit message to use when `push-if-not-clean` is `true` and there are changes."
    required: false
    default: "Changes detected by Check Git Status Action"
  request-changes-comment:
    description: "The comment to use when `request-changes-if-not-clean` is `true` and there are changes."
    required: false
    default: "Changes detected by Check Git Status Action"
  targets:
    description: "Files, directories, and/or globs to check and commit."
    required: false
    default: "."
outputs:
  status:
    description: "Is git status clean or dirty?"
    value: ${{ steps.git-status.outputs.status }}
runs:
  using: "composite"
  steps:
    - id: git-status
      name: git status
      shell: bash
      env:
        TARGETS: ${{ inputs.targets }}
      run: |
        echo '::group::git status'
        if git rev-parse --verify HEAD >/dev/null 2>&1
        then
          against=HEAD
        else
          # Initial commit: diff against an empty tree object
          against=$(git hash-object -t tree /dev/null)
        fi
        git add -N "$TARGETS"
        if test $(git diff --name-only $against | wc -l) != 0
        then
          echo "status=dirty" >> $GITHUB_OUTPUT
          echo "::notice::Git status is dirty"
          git diff --name-only $against | xargs -n1 -I {} echo "::notice file={}::  File: {}"
        else
          echo "status=clean" >> $GITHUB_OUTPUT
          echo "::notice::Git status is clean"
        fi
        echo '::endgroup'

    - id: gh-pr-review
      name: gh pr review
      if: ${{ steps.git-status.outputs.status == 'dirty' && inputs.request-changes-if-not-clean == 'true' && github.event_name == 'pull_request' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.request-changes-token }}
        LEGACY_TOKEN: ${{ inputs.github-token }}
        REQUEST_CHANGES_COMMENT: ${{ inputs.request-changes-comment }}
      run: |
        echo '::group::gh pr review'
        if [[ "$GITHUB_TOKEN" = "$GH_TOKEN" ]] && [[ "$GITHUB_TOKEN" != "$LEGACY_TOKEN" ]]
        then
          GH_TOKEN="$LEGACY_TOKEN"
        fi
        gh pr review -rb "$REQUEST_CHANGES_COMMENT"
        echo '::endgroup::'

    - id: git-config
      name: git config
      if: ${{ steps.git-status.outputs.status == 'dirty' && inputs.push-if-not-clean == 'true' && github.event_name == 'pull_request' }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
        GH_TOKEN: "${{ inputs.push-token }}"
        LEGACY_TOKEN: ${{ inputs.github-token }}
      run: |
        echo '::group::git config'
        if [[ "$GITHUB_TOKEN" = "$GH_TOKEN" ]] && [[ "$GITHUB_TOKEN" != "$LEGACY_TOKEN" ]]
        then
          GH_TOKEN="$LEGACY_TOKEN"
        fi
        if [[ "$GITHUB_TOKEN" != "$GH_TOKEN" ]]
        then
          USERNAME=$(git log -n 1 --pretty=format:%an)
          USEREMAIL=$(git log -n 1 --pretty=format:%ae)
        else
          USERNAME="GitHub Action"
          USEREMAIL="41898282+github-actions[bot]@users.noreply.github.com"
        fi
        echo "::notice::Set git user name: $USERNAME"
        echo "::notice::Set git user email: $USEREMAIL"
        git config --global user.name "$USERNAME"
        git config --global user.email "$USEREMAIL"
        echo '::groupend::'

    - id: gh-auth
      name: gh auth
      if: ${{ steps.git-status.outputs.status == 'dirty' && inputs.push-if-not-clean == 'true' }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
        GH_TOKEN: "${{ inputs.push-token }}"
        LEGACY_TOKEN: ${{ inputs.github-token }}
      run: |
        echo '::group::gh auth'
        if [[ "$GITHUB_TOKEN" = "$GH_TOKEN" ]] && [[ "$GITHUB_TOKEN" != "$LEGACY_TOKEN" ]]
        then
          GH_TOKEN="$LEGACY_TOKEN"
        fi
        if [[ "$GITHUB_TOKEN" != "$GH_TOKEN" ]]
        then
          gh auth status
          gh api -H "Accept: application/vnd.github+json" /user
          gh auth setup-git
          OVERRIDE_LOGIN=$(gh api -H "Accept: application/vnd.github+json" /user -q '.login')
          OVERRIDE_REMOTE=$(git remote get-url origin --push | sed 's/^https:\/\//https:\/\/'"$OVERRIDE_LOGIN:$GH_TOKEN"'@/')
          echo "login=$OVERRIDE_LOGIN" >> $GITHUB_OUTPUT
          echo "remote=$OVERRIDE_REMOTE" >> $GITHUB_OUTPUT
        fi
        echo '::endgroup::'

    - id: git-commit
      name: git commit
      if: ${{ steps.git-status.outputs.status == 'dirty' && inputs.push-if-not-clean == 'true' && github.event_name == 'pull_request' }}
      shell: bash
      env:
        COMMIT_MESSAGE: ${{ inputs.commit-message }}
        TARGETS: ${{ inputs.targets }}
      run: |
        echo '::group::git commit'
        git add "$TARGETS"
        git commit -m "$COMMIT_MESSAGE"
        echo '::groupend::'

    - id: git-fetch
      name: git fetch
      if: ${{ steps.git-status.outputs.status == 'dirty' && inputs.push-if-not-clean == 'true' && github.event_name == 'pull_request' }}
      shell: bash
      run: |
        echo '::group::git fetch'
        git fetch --unshallow origin
        echo '::endgroup::'

    - id: git-push
      name: git push
      if: ${{ steps.git-status.outputs.status == 'dirty' && inputs.push-if-not-clean == 'true' && github.event_name == 'pull_request' }}
      shell: bash
      env:
        BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
        OVERRIDE_REMOTE: ${{ steps.gh-auth.outputs.remote }}
      run: |
        echo '::group::git push'
        if [[ "$OVERRIDE_REMOTE" != "" ]]
        then
          echo "::notice::git push -f --set-upstream $OVERRIDE_REMOTE HEAD:refs/heads/$BRANCH_NAME"
          git push -f --set-upstream "$OVERRIDE_REMOTE" "HEAD:refs/heads/$BRANCH_NAME"
        else
          echo "::notice::git push -f --set-upstream origin HEAD:refs/heads/$BRANCH_NAME"
          git push -f --set-upstream origin "HEAD:refs/heads/$BRANCH_NAME"
        fi
        echo '::endgroup::'

    - id: exit-1
      name: exit 1
      if: ${{ steps.git-status.outputs.status == 'dirty' && (inputs.fail-if-not-clean == 'true') }}
      shell: bash
      run: exit 1
branding:
  icon: "edit-3"
  color: "red"
