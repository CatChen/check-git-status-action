name: 'Check Git Status'
description: 'Fail the workflow or git push based if git status is not clean.'
inputs:
  fail-if-not-clean:
    description: 'Fail the workflow if git status is not clean.'
    required: false
    default: true
  push-if-not-clean:
    description: 'Commit the changes and push them to the origin if git status is not clean.'
    required: false
    default: false
  request-changes-if-not-clean:
    description: 'Request change when in the context of a Pull Request if git status is not clean.'
    required: false
    default: true
  github-token:
    description: 'GitHub token to use when pushing new changes.'
    required: false
    default: ${{ github.token }}
    deprecationMessage: 'Please use the push-token input instead.'
  push-token:
    description: 'GitHub token to use when pushing new changes.'
    required: false
    default: ${{ github.token }}
  request-changes-token:
    description: 'GitHub token to use when requesting changes in a Pull Request.'
    required: false
    default: ${{ github.token }}
  commit-message:
    description: 'The commit message to use when `push-if-not-clean` is `true` and there are changes.'
    required: false
    default: 'Changes detected by Check Git Status Action'
  request-changes-comment:
    description: 'The comment to use when `request-changes-if-not-clean` is `true` and there are changes.'
    required: false
    default: 'Changes detected by Check Git Status Action'
  targets:
    description: 'Files, directories, and/or globs to check and commit.'
    required: false
    default: '.'
outputs:
  status:
    description: 'Is git status clean or dirty?'
    value: ${{ steps.git-status.outputs.status }}
  sha:
    description: 'Commit hash when push-if-not-clean is set to true and the status is dirty.'
    value: ${{ steps.git-commit.outputs.sha }}
runs:
  using: 'composite'
  steps:
    - id: git-status
      name: git status
      shell: bash
      env:
        TARGETS: ${{ inputs.targets }}
      run: |
        echo '::group::git status'
        if git rev-parse --verify HEAD >/dev/null 2>&1
        then
          against=HEAD
        else
          # Initial commit: diff against an empty tree object
          against=$(git hash-object -t tree /dev/null)
        fi
        git add -N "$TARGETS"
        if test $(git diff --name-only $against | wc -l) != 0
        then
          echo "status=dirty" >> $GITHUB_OUTPUT
          echo "::notice::Git status is dirty"
          git diff --name-only $against | xargs -n1 -I {} echo "::notice file={}::  File: {}"
        else
          echo "status=clean" >> $GITHUB_OUTPUT
          echo "::notice::Git status is clean"
        fi
        echo '::endgroup'

    - id: get-tokens
      name: Get tokens
      if: |-
        ${{
          steps.git-status.outputs.status == 'dirty' &&
          (inputs.request-changes-if-not-clean == 'true' || inputs.push-if-not-clean == 'true') && 
          github.event_name == 'pull_request'
        }}
      shell: bash
      env:
        DEFAULT_TOKEN: ${{ github.token }}
        LEGACY_TOKEN: ${{ inputs.github-token }}
        REQUEST_CHANGES_TOKEN: ${{ inputs.request-changes-token }}
        PUSH_TOKEN: ${{ inputs.push-token }}
      run: |
        echo '::group::Get tokens'
        if [[ "$DEFAULT_TOKEN" = "$REQUEST_CHANGES_TOKEN" ]] && [[ "$DEFAULT_TOKEN" != "$LEGACY_TOKEN" ]]
        then
          # If github-token is assigned and request-changes-token is not assign (thus having the default token)
          # assign github-token to request-changes-token.
          echo "::warning::Using github-token as request-changes-token."
          echo "::warning::Please set request-changes-token and unset github-token."
          REQUEST_CHANGES_TOKEN="$LEGACY_TOKEN"
        fi
        echo "request-changes-token=$REQUEST_CHANGES_TOKEN" >> $GITHUB_OUTPUT

        if [[ "$DEFAULT_TOKEN" = "$PUSH_TOKEN" ]] && [[ "$DEFAULT_TOKEN" != "$LEGACY_TOKEN" ]]
        then
          # If github-token is assigned and push-token is not assign (thus having the default token)
          # assign github-token to push-token.
          echo "::warning::Using github-token as push-token."
          echo "::warning::Please set push-token and unset github-token."
          PUSH_TOKEN="$LEGACY_TOKEN"
        fi
        echo "push-token=$PUSH_TOKEN" >> $GITHUB_OUTPUT
        echo '::endgroup'

    - id: gh-pr-review
      name: gh pr review
      if: |-
        ${{
          steps.git-status.outputs.status == 'dirty' && 
          inputs.request-changes-if-not-clean == 'true' && 
          github.event_name == 'pull_request'
        }}
      shell: bash
      env:
        GH_TOKEN: ${{ steps.get-tokens.outputs.request-changes-token }}
        REQUEST_CHANGES_COMMENT: ${{ inputs.request-changes-comment }}
      run: |
        echo '::group::gh pr review'
        gh pr review -rb "$REQUEST_CHANGES_COMMENT"
        echo '::endgroup::'

    - id: get-login
      name: Get login
      if: |-
        ${{
          steps.git-status.outputs.status == 'dirty' && 
          inputs.push-if-not-clean == 'true' && 
          github.event_name == 'pull_request'
        }}
      shell: bash
      env:
        GH_TOKEN: ${{ steps.get-tokens.outputs.push-token }}
        DEFAULT_TOKEN: ${{ github.token }}
      run: |
        echo '::group::Get login'
        if [[ "$DEFAULT_TOKEN" != "$GH_TOKEN" ]]
        then
          # Use the user or the app behind the push-token as the commit author if it's assigned.
          USER=$(gh api graphql \
            -H "X-Github-Next-Global-ID: 1" \
            -f query="query { viewer { login, global_id: id } }" \
            -q ".data.viewer")
          USER_LOGIN=$(echo "$USER" | jq -r ".login")
          echo "::notice::Login behind push-token is $USER_LOGIN"
          USER_GLOBAL_ID=$(echo "$USER" | jq -r ".global_id")
          echo "::notice::$USER_LOGIN has a global id $USER_GLOBAL_ID"
        else
          # Use GitHub Actions Bot as the commit author if the push-token isn't assigned.
          # USER_NAME="GitHub Action"
          # USER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          USER_LOGIN="github-actions[bot]"
          USER_GLOBAL_ID="BOT_kgDOAn9RKg"
          echo "::notice::Default login used for push is $USER_LOGIN"
          echo "::notice::Default global id used for push is $USER_GLOBAL_ID"
        fi
        echo "user-login=$USER_LOGIN" >> $GITHUB_OUTPUT
        echo "user-global-id=$USER_GLOBAL_ID" >> $GITHUB_OUTPUT
        echo '::endgroup'

    - id: get-git-user
      name: Get git user
      if: |-
        ${{
          steps.git-status.outputs.status == 'dirty' && 
          inputs.push-if-not-clean == 'true' && 
          github.event_name == 'pull_request'
        }}
      shell: bash
      env:
        GH_TOKEN: ${{ steps.get-tokens.outputs.push-token }}
        USER_LOGIN: ${{ steps.get-login.outputs.user-login }}
        USER_GLOBAL_ID: ${{ steps.get-login.outputs.user-global-id }}
      run: |
        echo '::group::Get git user'
        USER=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/users/$USER_LOGIN" \
          -q "pick(.login, .id, .name, .email, .type)")
        USER_ID=$(echo "$USER" | jq -r ".id")
        echo "::notice::$USER_LOGIN has an id $USER_ID"
        USER_TYPE=$(echo "$USER" | jq -r ".type")
        echo "::notice::$USER_LOGIN is a $USER_TYPE"

        if [[ "$USER_TYPE" = "User" ]]
        then
          USER_NAME=$(echo "$USER" | jq -r ".name")
          echo "::notice::$USER_LOGIN is named $USER_NAME"
          USER_EMAIL=$(echo "$USER" | jq -r ".email")
          echo "::notice::$USER_LOGIN uses the email $USER_EMAIL"
        elif [[ "$USER_TYPE" = "Bot" ]]
        then
          BOT_LOGIN=$(gh api graphql \
            -H "X-Github-Next-Global-ID: 1" \
            -f query="query { node(id: "'"'"$USER_GLOBAL_ID"'"'") { ... on Bot{ login } } }" \
            -q ".data.node.login")
          echo "::notice::$USER_TYPE login is $BOT_LOGIN"
          BOT=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/apps/$BOT_LOGIN" \
            -q "pick(.name, .id)")
          USER_NAME=$(echo "$BOT" | jq -r ".name")
          echo "::notice::$BOT_LOGIN is named $USER_NAME"
          USER_EMAIL="$USER_ID+$USER_LOGIN@users.noreply.github.com"
          echo "::notice::$BOT_LOGIN uses the email $USER_EMAIL"
        else
          # If nothing works fall back to last commit author.
          USER_NAME=$(git log -n 1 --pretty=format:%an)
          echo "::notice::Fallback user name is $USER_NAME"
          USER_EMAIL=$(git log -n 1 --pretty=format:%ae)
          echo "::notice::Fallback user email is $USER_EMAIL"
        fi

        echo "user-name=$USER_NAME" >> $GITHUB_OUTPUT
        echo "user-email=$USER_EMAIL" >> $GITHUB_OUTPUT
        echo '::endgroup'

    - id: git-config
      name: git config
      if: |-
        ${{
          steps.git-status.outputs.status == 'dirty' &&
          inputs.push-if-not-clean == 'true' &&
          github.event_name == 'pull_request'
        }}
      shell: bash
      env:
        USER_NAME: ${{ steps.get-git-user.outputs.user-name }}
        USER_EMAIL: ${{ steps.get-git-user.outputs.user-email }}
      run: |
        echo '::group::git config'
        git config --global user.name "$USER_NAME"
        echo "::notice::Set git user name: $USER_NAME"
        git config --global user.email "$USER_EMAIL"
        echo "::notice::Set git user email: $USER_EMAIL"
        echo '::groupend::'

    - id: gh-auth
      name: gh auth
      if: |-
        ${{
          steps.git-status.outputs.status == 'dirty' && 
          inputs.push-if-not-clean == 'true'
        }}
      shell: bash
      env:
        DEFAULT_TOKEN: ${{ github.token }}
        GH_TOKEN: ${{ steps.get-tokens.outputs.push-token }}
        USER_LOGIN: ${{ steps.get-login.outputs.user-login }}
      run: |
        echo '::group::gh auth'
        if [[ "$DEFAULT_TOKEN" != "$GH_TOKEN" ]]
        then
          gh auth status
          gh auth setup-git
          git config --list
          GIT_REMOTE=$(git remote get-url origin | sed 's/^https:\/\//https:\/\/'"$USER_LOGIN:$GH_TOKEN"'@/')
          echo "git-remote=$GIT_REMOTE" >> $GITHUB_OUTPUT
        fi
        echo '::endgroup::'

    - id: git-commit
      name: git commit
      if: |-
        ${{
          steps.git-status.outputs.status == 'dirty' &&
          inputs.push-if-not-clean == 'true' &&
          github.event_name == 'pull_request'
        }}
      shell: bash
      env:
        COMMIT_MESSAGE: ${{ inputs.commit-message }}
        TARGETS: ${{ inputs.targets }}
      run: |
        echo '::group::git commit'
        git add "$TARGETS"
        git commit -m "$COMMIT_MESSAGE"
        echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo '::groupend::'

    - id: git-fetch
      name: git fetch
      if: |-
        ${{
          steps.git-status.outputs.status == 'dirty' &&
          inputs.push-if-not-clean == 'true' &&
          github.event_name == 'pull_request'
        }}
      shell: bash
      run: |
        echo '::group::git fetch'
        IS_SHALLOW=$(git rev-parse --is-shallow-repository)
        if [[ "$IS_SHALLOW" == "true" ]]
        then
          git fetch --unshallow origin
        fi
        echo '::endgroup::'

    - id: git-push
      name: git push
      if: |-
        ${{
          steps.git-status.outputs.status == 'dirty' &&
          inputs.push-if-not-clean == 'true' &&
          github.event_name == 'pull_request'
        }}
      shell: bash
      env:
        BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
        GIT_REMOTE: ${{ steps.gh-auth.outputs.git-remote }}
      run: |
        echo '::group::git push'
        if [[ -n "$GIT_REMOTE"  ]]
        then
          echo "::notice::Push to $GIT_REMOTE HEAD:refs/heads/$BRANCH_NAME"
          git push -f --set-upstream "$GIT_REMOTE" "HEAD:refs/heads/$BRANCH_NAME"
        else
          echo "::notice::Push to origin HEAD:refs/heads/$BRANCH_NAME"
          git push -f --set-upstream origin "HEAD:refs/heads/$BRANCH_NAME"
        fi
        echo '::endgroup::'

    - id: exit-1
      name: exit 1
      if: |-
        ${{
          steps.git-status.outputs.status == 'dirty' &&
          inputs.fail-if-not-clean == 'true'
        }}
      shell: bash
      run: exit 1
branding:
  icon: 'edit-3'
  color: 'red'
